---
description:
globs:
alwaysApply: true
---
# Commit Rules

## Обязательные проверки перед коммитом

Перед каждым коммитом **ОБЯЗАТЕЛЬНО** выполнять следующие проверки:

### 1. Удаление комментариев
- **ОБЯЗАТЕЛЬНО** удалить все комментарии из только что добавленного кода
- Код должен быть самодокументируемым
- Удалить все объяснительные комментарии в коде
- Оставить только необходимые комментарии для экспортируемых функций (если требуется)

### 2. Линтер
```bash
golangci-lint run
```
- Должен завершиться с кодом 0 (без ошибок)
- Если есть ошибки - исправить их перед коммитом

### 3. Тесты
```bash
go test ./... -count=1 -race -timeout=60s
```
- Все тесты должны проходить
- Race detection включен
- Timeout 60 секунд

### 3. Коммит только после успешных проверок
- Коммит делается **ТОЛЬКО** после успешного прохождения линтера и тестов
- Никаких исключений

## Формат сообщений коммитов

### Структура
```
<branch-name>: <short-description>
```

### Правила
- **Короткие** - максимум 72 символа в первой строке
- **Лаконичные** - без лишних слов
- **Информативные** - понятно что изменилось
- **Без воды** - никаких "fix", "update", "improve" без контекста

### Примеры хороших сообщений
```
security/add-rate-limiting: fix linter errors in tests
auth/jwt-validation: add secret strength validation
config/cors: move domains to env variables
```

### Примеры плохих сообщений
```
fix bugs
update code
improve performance
security: fix some issues and improve code quality
```

## Правила работы с ветками

### Обязательная проверка ветки перед коммитом

**ПЕРЕД КАЖДЫМ КОММИТОМ** проверить текущую ветку:

```bash
git branch --show-current
```

### Если находимся в ветке `main`:

1. **ОБЯЗАТЕЛЬНО** создать новую ветку для фичи
2. **НЕ КОММИТИТЬ** напрямую в `main`
3. **НЕ ПУШИТЬ** изменения в `main`

### Создание ветки для фичи:

```bash
# Проверить текущую ветку
git branch --show-current

# Если main - создать новую ветку
git checkout -b <feature-type>/<feature-name>

# Примеры:
git checkout -b security/http-only-cookies
git checkout -b auth/jwt-validation
git checkout -b config/cors-settings
git checkout -b api/user-endpoints
```

### Названия веток:

- **security/** - для изменений безопасности
- **auth/** - для аутентификации и авторизации
- **api/** - для новых API endpoints
- **config/** - для конфигурации
- **test/** - для тестов
- **docs/** - для документации
- **refactor/** - для рефакторинга

## Процесс коммита

1. **Проверить ветку** - если `main`, создать новую ветку
2. Внести изменения в код
3. **Удалить все комментарии** из добавленного кода
4. Запустить `golangci-lint run`
5. Запустить `go test ./... -count=1 -race -timeout=60s`
6. Если проверки прошли успешно - сделать коммит
7. Если проверки не прошли - исправить ошибки и повторить с шага 4

## Исключения

**НЕТ ИСКЛЮЧЕНИЙ** - правила применяются ко всем коммитам без исключений.