---
description:
globs:
alwaysApply: true
---
rules:
  - Use Go 1.22+ and standard library first; prefer small, cohesive packages.
  - All code strings must be in English.
  - Do not add comments to code.
  - Always specify function return types explicitly.
  - Follow gofumpt formatting and goimports for imports.
  - Prefer immutable data and pure functions where practical.
  - Keep handlers thin; move business logic to services.
  - Use context.Context for request-scoped values and deadlines.
  - Avoid global state; use dependency injection via constructors.
  - Log structured JSON and return consistent API errors.

conventions:
  commit:
    - Commit messages must start with the current branch name, e.g. "feat/init-go-api: ...".
    - Use present tense, concise summaries (<72 chars) and meaningful bodies when needed.
  testing:
    - Tests must run headless and non-interactive.
    - Default test command: "go test ./... -count=1 -race -timeout=60s".
  run:
    - Default run command: "go run ./cmd/server".
  lint:
    - Default lint command: "golangci-lint run".
  format:
    - Default format commands (order):
      - "gofumpt -l -w ."
      - "goimports -w ."

project:
  structure:
    - cmd/server: application entrypoint
    - internal/: private app packages (http, services, repositories)
    - pkg/: optional public packages
    - docs/: documentation and plans

api:
  - Start with "/health" endpoint returning 200 and JSON { "status": "ok" }.
  - Use versioned routes later (e.g., "/api/v1").
  - Return errors as JSON: { "error": { "code": string, "message": string } }.

coding:
  - Use explicit struct field tags for JSON.
  - Validate inputs at boundaries; fail fast with clear errors.
  - Use time.Time for timestamps (UTC) and RFC3339 for serialization.
  - Keep public APIs minimal; unexport internal details.

tools:
  - Ensure the following tools are installed: go, golangci-lint, gofumpt, staticcheck.