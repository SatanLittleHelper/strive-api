name: Pull Request

on:
  pull_request:
    branches: ['*']

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.22', '1.23']
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: strive_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: strive_test
      DB_SSL_MODE: disable
      JWT_SECRET: test-secret-key-12345

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
        cache-dependency-path: go.sum

    - name: Install tools
      run: |
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.62.0
        go install mvdan.cc/gofumpt@v0.7.0
        go install golang.org/x/tools/cmd/goimports@latest
        go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Format check
      run: |
        echo "🎨 Checking code formatting..."
        gofumpt -l -w .
        goimports -w .
        if [ -n "$(git status --porcelain)" ]; then
          echo "❌ Code is not properly formatted"
          echo "Please run 'make format' to fix formatting issues"
          git diff
          exit 1
        fi
        echo "✅ Code formatting is correct"

    - name: Lint
      run: |
        echo "🔍 Running linter..."
        golangci-lint run
        echo "✅ Linting passed"

    - name: Wait for PostgreSQL
      run: |
        echo "⏳ Waiting for PostgreSQL to be ready..."
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        echo "✅ PostgreSQL is ready"

    - name: Run migrations
      run: |
        echo "🚀 Running database migrations..."
        go run ./cmd/migrate -direction=up
        echo "✅ Migrations completed"

    - name: Run tests with coverage
      run: |
        echo "🧪 Running tests with coverage..."
        go test ./... -count=1 -race -timeout=60s -coverprofile=coverage.out -v
        coverage_percent=$(go tool cover -func=coverage.out | tail -1 | awk '{print $3}')
        echo "✅ Test coverage: $coverage_percent"

    - name: Build applications
      run: |
        echo "🔨 Building applications..."
        go build -v ./cmd/server
        go build -v ./cmd/migrate
        echo "✅ Build successful"

    - name: Security scan
      run: |
        echo "🔒 Running vulnerability scan..."
        govulncheck ./...
        echo "✅ Security scan completed"

    - name: Build Docker image
      run: |
        echo "🐳 Building Docker image..."
        docker build -t strive-api:pr-${{ github.event.number }} .
        echo "✅ Docker image build successful"

    - name: Upload coverage to Codecov
      if: matrix.go-version == '1.23'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: PR Summary
      if: matrix.go-version == '1.23'
      run: |
        echo "## 🎉 Pull Request Check Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🎨 Code formatting | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔍 Linting | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "| 🚀 Database migrations | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "| 🧪 Tests with coverage | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔨 Applications build | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔒 Security scan | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "| 🐳 Docker build | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🚀 **Your pull request is ready for review!**" >> $GITHUB_STEP_SUMMARY
